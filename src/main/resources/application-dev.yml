spring:
  datasource:
    url: #{DATASOURCE_URL}#
    username: #{DATASOURCE_USERNAME}#
    password: #{DATASOURCE_PASSWORD}#
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: #{GOOGLE_CLIENT_ID}#
            client-secret: #{GOOGLE_CLIENT_SECRET}#
            scope:
              - email
              - profile
            redirect-uri: "https://toock.store/login/oauth2/code/{registrationId}"
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
  cloud:
    aws:
      credentials:
        access-key: #${AWS_ACCESS_KEY}#
        secret-key: #${AWS_SECRET_KEY}#
      region:
        static: ap-northeast-2
      s3:
        # 사용할 S3 버킷 이름을 입력하세요.
        bucket: #${AWS_BUCKET_NAME}#
      stack:
        # CloudFormation을 사용하지 않을 경우 false로 설정
        auto: false

  servlet:
    multipart:
      max-file-size: 25MB
      max-request-size: 25MB

openai:
  api:
    key: #{OPENAI_API_KEY}#
    timeout: 60

whisper:
  upload:
    dir: uploads/audio

gemini:
  api:
    key: #{GEMINI_API_KEY}#

# JWT 설정
jwt:
  secret: #{JWT_SECRET}#
  expiration: 86400000

app:
  oauth2:
    success-url: #{OAUTH2_SUCCESS_URL}#
    failure-url: #{OAUTH2_FAILURE_URL}#

logging:
  level:
    org.springframework.security: DEBUG

server:
  forward-headers-strategy: framework